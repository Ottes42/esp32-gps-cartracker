name: Build Firmware Binaries

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
    paths:
      - 'firmware/**'
      - 'scripts/build-firmware.sh'
      - '.github/workflows/build-firmware.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'firmware/**'
      - 'scripts/build-firmware.sh'
      - '.github/workflows/build-firmware.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      build_mode:
        description: 'Build mode: all variants or quick validation'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - quick        
      esphome_version:
        description: 'ESPHome version (e.g., 2025.8.0)'
        required: false
        default: '2025.8.0'

env:
  ESPHOME_VERSION: ${{ github.event.inputs.esphome_version || '2025.8.0' }}




permissions:
  contents: write  # Needed to create releases and push tags
  actions: read    # Needed to download workflow artifacts

jobs:
  # Quick validation build (PR and non-release pushes)
  quick-build:
    name: Quick Validation Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && inputs.build_mode == 'quick')
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test primary board with different sensors for validation
          - board: nodemcu-32s
            board_name: "BerryBase NodeMCU-ESP32"
            chip: "ESP32"
            sensor: DHT11
          - board: esp32dev
            board_name: "Generic ESP32 DevKit" 
            chip: "ESP32"
            sensor: DHT22
          - board: esp32-s3-devkitc-1
            board_name: "ESP32-S3-DevKitC-1"
            chip: "ESP32-S3"
            sensor: NONE

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache ESPHome
        uses: actions/cache@v4
        with:
          path: ~/.esphome
          key: ${{ runner.os }}-esphome-2025.8.0-${{ hashFiles('firmware/firmware.yaml') }}
          restore-keys: |
            ${{ runner.os }}-esphome-2025.8.0-

      - name: Create secrets file
        run: |
          if [ ! -f "firmware/secrets.yaml" ]; then
            cat > firmware/secrets.yaml << EOF
          # Default secrets for CI builds - device will use AP mode for setup
          wifi_ssid: "gps-cartracker-setup"
          wifi_password: "setup-setup"
          server_url: "http://192.168.1.100:3000"
          server_auth_user: "admin"
          server_auth_pass: "password"
          EOF
            echo "✅ Created firmware/secrets.yaml for CI build"
          else
            echo "✅ Using existing firmware/secrets.yaml"
          fi

      - name: Build firmware variant
        run: |
          echo "🔨 Quick validation build for ${{ matrix.board_name }} with ${{ matrix.sensor }} sensor"
          if ! docker run --rm \
              -v "${PWD}:/config" \
              -v ~/.esphome:/config/.esphome \
              "esphome/esphome:2025.8.0" \
              compile /config/firmware/firmware.yaml; then
            echo "❌ Quick build failed for ${{ matrix.board }} with ${{ matrix.sensor }}"
            exit 1
          fi
          echo "✅ Quick build passed for ${{ matrix.board }} with ${{ matrix.sensor }}"

  # Full build matrix (releases and manual full builds)
  build-firmware:
    name: Build All Firmware Variants
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.build_mode == 'all')
    strategy:
      fail-fast: false
      matrix:
        include:
          # NodeMCU-ESP32 (Primary/Recommended)
          - board: nodemcu-32s
            board_name: "BerryBase NodeMCU-ESP32"
            chip: "ESP32"
            sensor: DHT11
          - board: nodemcu-32s
            board_name: "BerryBase NodeMCU-ESP32"
            chip: "ESP32"
            sensor: DHT22
          - board: nodemcu-32s
            board_name: "BerryBase NodeMCU-ESP32"
            chip: "ESP32"
            sensor: NONE
            
          # ESP32 DevKit (Generic)
          - board: esp32dev
            board_name: "Generic ESP32 DevKit"
            chip: "ESP32"
            sensor: DHT11
          - board: esp32dev
            board_name: "Generic ESP32 DevKit"
            chip: "ESP32"
            sensor: DHT22
          - board: esp32dev
            board_name: "Generic ESP32 DevKit"
            chip: "ESP32"
            sensor: NONE
            
          # ESP32-WROVER-KIT (With PSRAM)
          - board: esp-wrover-kit
            board_name: "ESP32-WROVER-KIT"
            chip: "ESP32"
            sensor: DHT11
          - board: esp-wrover-kit
            board_name: "ESP32-WROVER-KIT"
            chip: "ESP32"
            sensor: DHT22
          - board: esp-wrover-kit
            board_name: "ESP32-WROVER-KIT"
            chip: "ESP32"
            sensor: NONE
            
          # ESP32-S3-DevKitC-1 (Latest)
          - board: esp32-s3-devkitc-1
            board_name: "ESP32-S3-DevKitC-1"
            chip: "ESP32-S3"
            sensor: DHT11
          - board: esp32-s3-devkitc-1
            board_name: "ESP32-S3-DevKitC-1"
            chip: "ESP32-S3"
            sensor: DHT22
          - board: esp32-s3-devkitc-1
            board_name: "ESP32-S3-DevKitC-1"
            chip: "ESP32-S3"
            sensor: NONE

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache ESPHome
        uses: actions/cache@v4
        with:
          path: ~/.esphome
          key: ${{ runner.os }}-esphome-${{ env.ESPHOME_VERSION }}-${{ hashFiles('firmware/firmware.yaml') }}
          restore-keys: |
            ${{ runner.os }}-esphome-${{ env.ESPHOME_VERSION }}-

      - name: Validate inputs
        run: |
          echo "🔍 Validating build inputs..."
          echo "Board: ${{ matrix.board }}"
          echo "Board Name: ${{ matrix.board_name }}"
          echo "Chip: ${{ matrix.chip }}"
          echo "Sensor: ${{ matrix.sensor }}"
          
          # Read supported boards from shared configuration file
          mapfile -t SUPPORTED_BOARDS < boards.txt
          board_valid=false
          for board in "${SUPPORTED_BOARDS[@]}"; do
            if [[ "${{ matrix.board }}" == "$board" ]]; then
              board_valid=true
              break
            fi
          done
          
          if [[ "$board_valid" != "true" ]]; then
            echo "❌ Invalid board: ${{ matrix.board }}"
            echo "📋 Supported boards: ${SUPPORTED_BOARDS[*]}"
            exit 1
          fi
          
          # Validate sensor is supported
          if [[ ! "${{ matrix.sensor }}" =~ ^(DHT11|DHT22|NONE)$ ]]; then
            echo "❌ Invalid sensor: ${{ matrix.sensor }}"
            exit 1
          fi
          
          echo "✅ Input validation passed"

      - name: Create board-specific firmware config
        run: |
          echo "🔧 Creating firmware config for ${{ matrix.board_name }} with ${{ matrix.sensor }} sensor..."
          
          # Create board-specific config with temperature sensor variant  
          config_name="firmware-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]').yaml"
          cp firmware/firmware.yaml "$config_name"
          
          # Update board and device naming
          sed -i "s/board: nodemcu-32s$/board: ${{ matrix.board }}/" "$config_name"
          sed -i "s/name: gps-cartracker-nmcu$/name: gps-cartracker-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]')/" "$config_name"
          sed -i "s/friendly_name: GPS Cartracker NMCU$/friendly_name: GPS Cartracker (${{ matrix.board_name }} + ${{ matrix.sensor }})/" "$config_name"
          sed -i "s/username: gps-cartracker$/username: gps-cartracker-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]')/" "$config_name"
          
          # Apply board-specific pin configurations
          case "${{ matrix.board }}" in
            "esp32dev")
              echo "📋 Applying ESP32 DevKit pin configuration"
              sed -i 's/PIN_DHT: "GPIO21"/PIN_DHT: "GPIO22"/' "$config_name"
              sed -i 's/PIN_ACC_SENSE: "GPIO18"/PIN_ACC_SENSE: "GPIO35"/' "$config_name"
              sed -i 's/PIN_LED: "GPIO19"/PIN_LED: "GPIO23"/' "$config_name"
              ;;
            "esp-wrover-kit")
              echo "📋 Applying ESP32-WROVER-KIT pin configuration"
              sed -i 's/PIN_UART_RX: "GPIO16"/PIN_UART_RX: "GPIO25"/' "$config_name"
              sed -i 's/PIN_UART_TX: "GPIO17"/PIN_UART_TX: "GPIO26"/' "$config_name"
              sed -i 's/PIN_DHT: "GPIO21"/PIN_DHT: "GPIO27"/' "$config_name"
              sed -i 's/PIN_ACC_SENSE: "GPIO18"/PIN_ACC_SENSE: "GPIO39"/' "$config_name"
              sed -i 's/PIN_LED: "GPIO19"/PIN_LED: "GPIO5"/' "$config_name"
              ;;
            "esp32-s3-devkitc-1")
              echo "📋 Applying ESP32-S3-DevKitC-1 pin configuration"
              sed -i 's/PIN_UART_RX: "GPIO16"/PIN_UART_RX: "GPIO44"/' "$config_name"
              sed -i 's/PIN_UART_TX: "GPIO17"/PIN_UART_TX: "GPIO43"/' "$config_name"
              sed -i 's/PIN_ACC_SENSE: "GPIO18"/PIN_ACC_SENSE: "GPIO4"/' "$config_name"
              sed -i 's/PIN_LED: "GPIO19"/PIN_LED: "GPIO48"/' "$config_name"
              # ESP32-S3 has different SD card pins
              sed -i 's/clk_pin: GPIO14/clk_pin: GPIO39/' "$config_name"
              sed -i 's/cmd_pin: GPIO15/cmd_pin: GPIO38/' "$config_name"
              sed -i 's/data0_pin: GPIO2/data0_pin: GPIO40/' "$config_name"
              sed -i 's/data1_pin: GPIO4/data1_pin: GPIO41/' "$config_name"
              sed -i 's/data2_pin: GPIO12/data2_pin: GPIO42/' "$config_name"
              sed -i 's/data3_pin: GPIO13/data3_pin: GPIO47/' "$config_name"
              # Add ESP32-S3 variant
              sed -i '/^esp32:/a\  variant: esp32s3' "$config_name"
              ;;
          esac
          
          # Apply temperature sensor configuration
          case "${{ matrix.sensor }}" in
            "DHT11")
              echo "🌡️ Configuring DHT11 sensor"
              sed -i '/- platform: dht/,/update_interval: 15s/{s/type: DHT22/type: DHT11/}' "$config_name"
              ;;
            "DHT22")
              echo "🌡️ Using DHT22 sensor (default)"
              # DHT22 is the default in firmware.yaml
              ;;
            "NONE")
              echo "🌡️ Disabling temperature sensor, using dummy values"
              # Remove DHT sensor and replace with template sensors
              sed -i '/- platform: dht/,/update_interval: 15s/d' "$config_name"
              # Insert template sensors after sensor: line
              sed -i '/^sensor:/a\
            # Temperature sensor disabled - using dummy values\
            - platform: template\
              id: car_temp_c\
              name: "Temperature"\
              unit_of_measurement: "°C"\
              lambda: "return 22.0;"\
              update_interval: 15s\
            - platform: template\
              id: car_hum_pct\
              name: "Humidity"\
              unit_of_measurement: "%"\
              lambda: "return 60.0;"\
              update_interval: 15s' "$config_name"
              ;;
          esac
          
          echo "✅ Created config: $config_name"

      - name: Create secrets file
        run: |
          if [ ! -f "firmware/secrets.yaml" ]; then
            cat > firmware/secrets.yaml << EOF
          # Default secrets for CI builds - device will use AP mode for setup
          wifi_ssid: "gps-cartracker-setup"
          wifi_password: "setup-setup"
          server_url: "http://192.168.1.100:3000"
          server_auth_user: "admin"
          server_auth_pass: "password"
          EOF
            echo "✅ Created firmware/secrets.yaml for CI build"
          else
            echo "✅ Using existing firmware/secrets.yaml"
          fi

      - name: Validate and compile firmware
        run: |
          config_name="firmware-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]').yaml"
          
          # Copy secrets.yaml to root directory for ESPHome compilation
          # ESPHome expects secrets.yaml in the same directory as the config being compiled
          if [ -f "firmware/secrets.yaml" ]; then
            cp "firmware/secrets.yaml" "secrets.yaml"
            echo "✅ Copied secrets.yaml to root directory for ESPHome"
          else
            echo "❌ secrets.yaml not found in firmware directory"
            exit 1
          fi
          
          echo "🔍 Validating YAML syntax..."
          if docker run --rm \
              -v "${PWD}:/config" \
              "esphome/esphome:${{ env.ESPHOME_VERSION }}" \
              config "/config/$config_name"; then
            echo "✅ Configuration is valid"
          else
            echo "❌ Configuration validation failed"
            echo "📋 Dumping config for debugging:"
            head -50 "$config_name" || true
            exit 1
          fi
          
          echo "⚙️ Compiling firmware..."
          if docker run --rm \
              -v "${PWD}:/config" \
              -v ~/.esphome:/config/.esphome \
              "esphome/esphome:${{ env.ESPHOME_VERSION }}" \
              compile "/config/$config_name"; then
            echo "✅ Compilation successful"
          else
            echo "❌ Compilation failed"
            echo "📋 Build directory contents:"
            ls -la .esphome/build/ 2>/dev/null || echo "Build directory not found"
            exit 1
          fi
          
          # Clean up temporary secrets file
          rm -f "secrets.yaml"
          echo "🧹 Cleaned up temporary secrets.yaml file"

      - name: Copy firmware binary and create manifest
        run: |
          config_name="firmware-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]').yaml"
          device_name="gps-cartracker-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]')"
          output_name="gps-cartracker-${{ matrix.board }}-$(echo '${{ matrix.sensor }}' | tr '[:upper:]' '[:lower:]')"
          
          # Create build directory
          mkdir -p firmware_output
          
          echo "📦 Looking for firmware binary..."
          binary_found=false
          
          # Search for the compiled binary
          for binary in .esphome/build/$device_name/*.bin; do
            if [ -f "$binary" ]; then
              cp "$binary" "firmware_output/${output_name}.bin"
              binary_found=true
              echo "✅ Copied firmware binary: $binary -> firmware_output/${output_name}.bin"
              
              # Verify binary size (should be reasonable for ESP32 firmware)
              size=$(stat -c%s "firmware_output/${output_name}.bin")
              if [ $size -lt 100000 ] || [ $size -gt 10000000 ]; then
                echo "⚠️  Warning: Firmware size ${size} bytes seems unusual"
              else
                echo "✅ Firmware size: ${size} bytes (reasonable)"
              fi
              break
            fi
          done
          
          if [ "$binary_found" = false ]; then
            echo "❌ No binary found for ${{ matrix.board }} with ${{ matrix.sensor }}"
            echo "Available .bin files:"
            find ".esphome/build/$device_name" -name "*.bin" 2>/dev/null | head -10 || echo "None found"
            echo "Available directories:"
            ls -la ".esphome/build/" 2>/dev/null || echo "Build directory not accessible"
            exit 1
          fi
          
          # Get version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Create manifest for ESPHome Web Flasher
          echo "📋 Creating Web Flasher manifest..."
          cat > "firmware_output/${output_name}.json" << EOF
          {
            "name": "${{ matrix.board_name }} GPS Car Tracker (${{ matrix.sensor }})",
            "version": "${VERSION}",
            "home_assistant_domain": "esphome",
            "new_install_prompt_erase": true,
            "builds": [
              {
                "chipFamily": "${{ matrix.chip }}",
                "parts": [
                  {
                    "path": "${output_name}.bin",
                    "offset": 0
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "✅ Created Web Flasher manifest: firmware_output/${output_name}.json"
          
          # Clean up temp config
          rm -f "$config_name"

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}-${{ matrix.sensor }}
          path: |
            firmware_output/gps-cartracker-${{ matrix.board }}-*.bin
            firmware_output/gps-cartracker-${{ matrix.board }}-*.json

  create-release:
    name: Create GitHub Release
    needs: build-firmware
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all firmware artifacts
        uses: actions/download-artifact@v5
        with:
          path: firmware_artifacts

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Organize firmware files
        run: |
          mkdir -p release_assets
          
          echo "📦 Organizing firmware files..."
          # Copy all firmware binaries and manifests to release assets
          find firmware_artifacts -name "*.bin" -exec cp {} release_assets/ \;
          find firmware_artifacts -name "*.json" -exec cp {} release_assets/ \;
          
          echo "📋 Available firmware files:"
          ls -la release_assets/
          
          echo "🔢 Expected files: 24 (12 .bin + 12 .json)"
          echo "🔢 Actual files: $(ls release_assets/ | wc -l)"

      - name: Create comprehensive release notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # 🚗 GPS Car Tracker Firmware Release ${{ steps.version.outputs.VERSION }}
          
          Multi-board ESP32 firmware with comprehensive hardware support and temperature sensor options.
          
          ## 📦 Firmware Builds
          
          Each supported board now has 3 firmware variants:
          
          ### NodeMCU-ESP32 (Primary Recommended)
          - `gps-cartracker-nodemcu-32s-dht11.bin` - With DHT11 sensor
          - `gps-cartracker-nodemcu-32s-dht22.bin` - With DHT22 sensor  
          - `gps-cartracker-nodemcu-32s-none.bin` - No temperature sensor
          
          ### ESP32 DevKit (Generic)
          - `gps-cartracker-esp32dev-dht11.bin` - With DHT11 sensor
          - `gps-cartracker-esp32dev-dht22.bin` - With DHT22 sensor
          - `gps-cartracker-esp32dev-none.bin` - No temperature sensor
          
          ### ESP32-WROVER-KIT (With PSRAM)
          - `gps-cartracker-esp-wrover-kit-dht11.bin` - With DHT11 sensor
          - `gps-cartracker-esp-wrover-kit-dht22.bin` - With DHT22 sensor
          - `gps-cartracker-esp-wrover-kit-none.bin` - No temperature sensor
          
          ### ESP32-S3-DevKitC-1 (Latest)
          - `gps-cartracker-esp32-s3-devkitc-1-dht11.bin` - With DHT11 sensor
          - `gps-cartracker-esp32-s3-devkitc-1-dht22.bin` - With DHT22 sensor
          - `gps-cartracker-esp32-s3-devkitc-1-none.bin` - No temperature sensor
          
          ## 🌐 Web Flasher Support
          
          Each firmware binary includes a corresponding `.json` manifest file for easy web-based flashing:
          
          1. **Visit**: [ESPHome Web Flasher](https://web.esphome.io/)
          2. **Upload**: Select the `.json` file for your board and sensor combination
          3. **Connect**: USB cable to your ESP32 board
          4. **Flash**: Click "Install" and follow the prompts
          
          ## 🎯 Board Selection Guide
          
          - **Beginners**: `nodemcu-32s` (most tested, reliable SDMMC SD card support)
          - **Budget**: `esp32dev` (widely available, affordable, SPI SD card)
          - **Advanced**: `esp-wrover-kit` (PSRAM for complex applications)
          - **Latest**: `esp32-s3-devkitc-1` (newest ESP32-S3 with AI acceleration)
          
          ## 🌡️ Sensor Selection Guide
          
          - **DHT11**: Basic temperature/humidity (±2°C, ±5% RH)
          - **DHT22**: Precise temperature/humidity (±0.5°C, ±2% RH)
          - **NONE**: No sensor, dummy values for GPS-only tracking
          
          ## ⚙️ Quick Start
          
          1. **Flash firmware** using web flasher or esptool.py
          2. **First boot**: Connect to `gps-cartracker-setup` WiFi (password: `setup-setup`)
          3. **Configure**: Navigate to `http://192.168.4.1` and set your server details
          4. **Hardware setup**: Connect GPS module, SD card, and optional sensors
          5. **Deploy backend**: Use Docker Compose for the complete tracking system
          
          ## 📊 Features
          
          ✅ **GPS Tracking**: Real-time location logging with NMEA parsing  
          ✅ **SD Card Storage**: Local CSV buffering with automatic upload  
          ✅ **WiFi Upload**: Reliable data sync to backend server  
          ✅ **Web Interface**: Configuration and monitoring via captive portal  
          ✅ **Power Management**: Deep sleep when ACC (ignition) is off  
          ✅ **Multi-sensor**: GPS, temperature, humidity, and acceleration detection  
          ✅ **Time Sync**: GPS time with SNTP fallback for accuracy  
          ✅ **OTA Updates**: Over-the-air firmware updates support  
          
          ## 📖 Documentation
          
          - **Hardware Setup**: [HARDWARE.MD](https://github.com/Ottes42/esp32-gps-cartracker/blob/main/docs/HARDWARE.MD)
          - **Firmware Flashing**: [FIRMWARE-FLASHING.MD](https://github.com/Ottes42/esp32-gps-cartracker/blob/main/docs/FIRMWARE-FLASHING.MD)
          - **Backend Deployment**: [DEPLOYMENT.MD](https://github.com/Ottes42/esp32-gps-cartracker/blob/main/docs/DEPLOYMENT.MD)
          - **Web Interface**: [WEB-INTERFACE.MD](https://github.com/Ottes42/esp32-gps-cartracker/blob/main/docs/WEB-INTERFACE.MD)
          - **API Documentation**: [API.MD](https://github.com/Ottes42/esp32-gps-cartracker/blob/main/docs/API.MD)
          
          ## 🚨 Important Notes
          
          - **SD Card**: Use Class 10 or better for reliable logging
          - **Power Supply**: Stable 5V/2A recommended for GPS and cellular modules
          - **Antenna**: External GPS antenna recommended for vehicle use
          - **Temperature**: Verify sensor wiring before flashing sensor variants
          
          ---
          
          **Full Changelog**: https://github.com/Ottes42/esp32-gps-cartracker/compare/v0.6.0...v0.7.0
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: GPS Car Tracker Firmware ${{ steps.version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          files: |
            release_assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
